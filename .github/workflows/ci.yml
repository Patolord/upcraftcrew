name: CI

on:
  pull_request:
    branches: [main, master]
    paths:
      - "apps/web/**"
      - "packages/backend/**"
      - "package.json"
      - "pnpm-lock.yaml"
      - "pnpm-workspace.yaml"
  push:
    branches: [main, master]
    paths:
      - "apps/web/**"
      - "packages/backend/**"
      - "package.json"
      - "pnpm-lock.yaml"
      - "pnpm-workspace.yaml"

env:
  NODE_VERSION: "18"

jobs:
  # Security and validation checks
  security:
    name: Security & Validation
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_DIR=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ env.STORE_DIR }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run security audit
        run: pnpm audit --audit-level=moderate

      - name: Check for vulnerabilities
        run: pnpm audit --audit-level=high

      - name: Validate workspace
        run: pnpm run validate || echo "No validate script found"

  # Code quality and linting
  quality:
    name: Code Quality
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_DIR=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ env.STORE_DIR }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run linter
        run: pnpm run lint || echo "No lint script found"

      - name: Run type check
        run: pnpm run type-check || echo "No type-check script found"

      - name: Check code formatting
        run: pnpm run format:check || echo "No format:check script found"

  # Build and test web app
  build-test-web:
    name: Build & Test Web App
    runs-on: ubuntu-latest
    needs: [security, quality]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_DIR=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ env.STORE_DIR }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run web app tests
        run: pnpm --filter web test || echo "No test script found in web app"

      - name: Build web app
        run: pnpm --filter web build || echo "No build script found in web app"

      - name: Upload web build artifacts
        uses: actions/upload-artifact@v4
        if: success()
        with:
          name: web-build-files
          path: |
            apps/web/dist/
            apps/web/build/
            apps/web/.next/
            apps/web/out/

  # Build and test backend (convex)
  build-test-backend:
    name: Build & Test Backend
    runs-on: ubuntu-latest
    needs: [security, quality]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_DIR=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ env.STORE_DIR }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run backend tests
        run: pnpm --filter backend test || echo "No test script found in backend"

      - name: Build backend
        run: pnpm --filter backend build || echo "No build script found in backend"

      - name: Validate convex schema
        run: |
          cd packages/backend
          npx convex dev --once || echo "Convex validation failed or not configured"

      - name: Upload backend build artifacts
        uses: actions/upload-artifact@v4
        if: success()
        with:
          name: backend-build-files
          path: |
            packages/backend/dist/
            packages/backend/build/

  # E2E tests (if applicable)
  e2e:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    needs: [build-test-web, build-test-backend]
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_DIR=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ env.STORE_DIR }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run E2E tests
        run: pnpm --filter web run test:e2e || echo "No E2E test script found"

  # Deployment preview (for PRs)
  preview:
    name: Deploy Preview
    runs-on: ubuntu-latest
    needs: [build-test-web, build-test-backend]
    if: github.event_name == 'pull_request'
    # environment:
    #   name: preview
    #   url: ${{ steps.deploy.outputs.url }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_DIR=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ env.STORE_DIR }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build for preview
        run: |
          pnpm --filter web build
          pnpm --filter backend build

      - name: Deploy preview
        id: deploy
        run: |
          echo "url=https://preview-${{ github.event.number }}.your-domain.com" >> $GITHUB_OUTPUT
          echo "Preview deployment would happen here"

  # Production deployment (only on main merge)
  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [security, quality, build-test-web, build-test-backend]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    # environment:
    #   name: production
    #   url: ${{ steps.deploy.outputs.url }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_DIR=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ env.STORE_DIR }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run production tests
        run: |
          pnpm --filter web run test:prod || echo "No production test script found in web app"
          pnpm --filter backend run test:prod || echo "No production test script found in backend"

      - name: Build for production
        run: |
          pnpm --filter web build:prod || pnpm --filter web build
          pnpm --filter backend build:prod || pnpm --filter backend build

      - name: Deploy to production
        id: deploy
        run: |
          echo "url=https://your-production-domain.com" >> $GITHUB_OUTPUT
          echo "Production deployment would happen here"

  # Notify team
  notify:
    name: Notify Team
    runs-on: ubuntu-latest
    needs: [deploy]
    if: always() && github.ref == 'refs/heads/main'
    steps:
      - name: Notify on success
        if: success()
        run: |
          echo "✅ Deployment successful to main branch"
          # Add your notification logic here (Slack, Discord, etc.)

      - name: Notify on failure
        if: failure()
        run: |
          echo "❌ Deployment failed to main branch"
          # Add your notification logic here (Slack, Discord, etc.)
